plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'application'
    id 'jacoco'
}

group 'com.mybooks'
version '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClass.set('com.mybooks.api.BookStoreApplication')
}

repositories {
    mavenCentral()
}

ext {
    jjwtVersion = '0.9.1'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.0'
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.239'
    implementation 'com.github.derjust:spring-data-dynamodb:5.1.0'
    implementation 'org.mapstruct:mapstruct:1.5.1.Final'
    implementation "io.jsonwebtoken:jjwt:${jjwtVersion}"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/mybooks/api/model/**",
                    "com/mybooks/api/dto/**",
                    "com/mybooks/api/mapper/**",
                    "com/mybooks/api/exception/**",
                    "com/mybooks/api/config/**"
            ])
        }))
    }
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy(tasks.jacocoTestReport)
}

def profiles = 'dev'

bootRun {
    args = ["--spring.profiles.active=" + profiles]
}